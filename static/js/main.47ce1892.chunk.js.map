{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["LoginControl","props","gapi","window","handleLoginClick","bind","handleLogoutClick","initClient","state","apiSettingsAvilable","this","load","CLIENT_ID","localStorage","getItem","API_KEY","length","alert","setState","that","client","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","isSignedIn","listen","onAuthChange","get","error","console","JSON","stringify","signIn","signOut","isLoggedIn","className","onClick","React","Component","SettingsButton","handleClientIdChange","event","target","value","handleApiKeyChange","handleClickOpen","open","log","handleClose","setItem","location","reload","icon","faCog","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","onChange","fullWidth","DialogActions","Button","color","LoginButton","LogoutButton","HoursListing","handleDateChange","updateEvents","listItems","name","hours","map","project","key","date","Date","totalHours","prevProps","prevState","timeMin","getTime","setHours","timeMax","calendar","calendarList","list","response","items","result","i","summary","events","toISOString","eventDict","Object","start","dateTime","end","deltaHours","parse","hasOwnProperty","entries","newDate","breakdown","onDateChange","DatePicker","dateString","generateDateString","subtractDay","addDay","onKeyDown","document","addEventListener","removeEventListener","e","stopPropagation","which","Intl","DateTimeFormat","weekday","month","day","year","format","days","addDays","faChevronLeft","faChevronRight","App","handleAuthChange","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.47ce1892.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronLeft, faChevronRight, faCog } from '@fortawesome/free-solid-svg-icons'\nimport './App.css';\n\n// For dialog\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nclass LoginControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.gapi = window.gapi;\n\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n    this.initClient = this.initClient.bind(this);\n    this.state = { apiSettingsAvilable: false }\n  }\n\n  componentDidMount() {\n    // Initialize the Google API client when the component mounts\n    this.gapi.load('client:auth2', this.initClient);\n  }\n\n  initClient() {\n    let CLIENT_ID = window.localStorage.getItem('clientId')\n    let API_KEY = window.localStorage.getItem('apiKey')\n\n    if (CLIENT_ID == null || CLIENT_ID.length === 0 || API_KEY == null || API_KEY.length === 0) {\n      window.alert(\"Set the Google Calendar client ID and API key in the Settings dialog.\");\n    } else {\n      this.setState({ apiSettingsAvilable: true })\n\n      // Array of API discovery doc URLs for APIs used by the quickstart\n      const DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n\n      // Authorization scopes required by the API; multiple scopes can be\n      // included, separated by spaces.\n      const SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\n\n      const that = this;\n      this.gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      }).then(function () {\n        // Set up listener for changes\n        that.gapi.auth2.getAuthInstance().isSignedIn.listen(that.props.onAuthChange);\n\n        // Handle the initial sign-in state.\n        that.props.onAuthChange(that.gapi.auth2.getAuthInstance().isSignedIn.get());\n      }, function (error) {\n        console.error(JSON.stringify(error, null, 2));\n      });\n    }\n  }\n\n  handleLoginClick() {\n    this.gapi.auth2.getAuthInstance().signIn();\n  }\n\n  handleLogoutClick() {\n    this.gapi.auth2.getAuthInstance().signOut();\n  }\n\n  render() {\n    const isLoggedIn = this.props.isLoggedIn;\n    let button;\n    if (isLoggedIn == null) {\n      button = <span className=\"float-right\"><SettingsButton /></span>\n    } else if (isLoggedIn) {\n      button = <LogoutButton onClick={this.handleLogoutClick} />;\n    } else {\n      button = <LoginButton onClick={this.handleLoginClick} />;\n    }\n\n    return (button);\n  }\n}\n\nclass SettingsButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      clientId: window.localStorage.getItem(\"clientId\") || \"\",\n      apiKey: window.localStorage.getItem(\"apiKey\") || \"\"\n    };\n  }\n\n  handleClientIdChange = (event) => {\n    this.setState({ clientId: event.target.value })\n  }\n\n  handleApiKeyChange = (event) => {\n    this.setState({ apiKey: event.target.value })\n  }\n\n  handleClickOpen = () => {\n    this.setState({ open: true })\n    console.log(this.open)\n  };\n\n  handleClose = () => {\n    this.setState({ open: false })\n    console.log(this.open)\n\n    // Save the data to local storage\n    window.localStorage.setItem(\"clientId\", this.state.clientId);\n    window.localStorage.setItem(\"apiKey\", this.state.apiKey);\n\n    // Reload the page\n    window.location.reload()\n  };\n\n  render() {\n    return (\n      <span>\n        <button className=\"settings-btn\" onClick={this.handleClickOpen}>\n          <FontAwesomeIcon icon={faCog} />\n        </button>\n        <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n          <DialogTitle id=\"form-dialog-title\">Settings</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              To access the Google Calendar API, fill in the following information:\n          </DialogContentText>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"clientId\"\n              label=\"Client ID\"\n              type=\"text\"\n              value={this.state.clientId}\n              onChange={this.handleClientIdChange}\n              fullWidth\n            />\n            <TextField\n              margin=\"dense\"\n              id=\"apiKey\"\n              label=\"API Key\"\n              type=\"text\"\n              value={this.state.apiKey}\n              onChange={this.handleApiKeyChange}\n              fullWidth\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Save\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </span>\n    );\n  }\n}\n\nclass LoginButton extends React.Component {\n  render() {\n    return <span className=\"float-right\">\n      <SettingsButton />\n      <button className=\"button\" onClick={this.props.onClick}>Authorize</button>\n\n    </span>;\n  }\n}\n\nclass LogoutButton extends React.Component {\n  render() {\n    <SettingsButton />\n    return <button className=\"button\" onClick={this.props.onClick}>Log Out</button>;\n  }\n}\n\nclass HoursListing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.updateEvents = this.updateEvents.bind(this);\n    this.gapi = window.gapi;\n\n    const projects = [\n      { name: 'Event A', hours: 0.5 },\n      { name: 'Event B', hours: 1.5 }\n    ]\n\n    this.listItems = projects.map((project) =>\n      <li key={project.name}>\n        <span>{project.name} &mdash; </span>\n        <span className=\"bold\">{project.hours}</span>\n      </li>\n    );\n\n    this.state = {\n      date: new Date(),\n      listItems: null,\n      totalHours: -1\n    };\n  }\n\n  componentDidMount() {\n    this.updateEvents();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Update the event list if the login state or date changes\n    if (prevProps.isLoggedIn != this.props.isLoggedIn || prevState.date != this.state.date) {\n      this.updateEvents();\n    }\n  }\n\n  updateEvents() {\n    if (this.props.isLoggedIn) {\n      let timeMin = new Date(this.state.date.getTime());\n      timeMin.setHours(0, 0, 0, 0)\n\n      let timeMax = new Date(this.state.date.getTime());\n      timeMax.setHours(23, 59, 59, 0)\n\n      const that = this;\n      this.gapi.client.calendar.calendarList.list().then(function (response) {\n        const items = response.result.items\n        for (var i = 0; i < items.length; i++) {\n          if (items[i].summary == \"Work Hours\") {\n            console.log(items[i].id)\n            return items[i].id;\n          }\n        }\n        console.error(\"Could not find calendar; defaulting to primary\");\n        return 'primary';\n      }).then(function (id) {\n        return that.gapi.client.calendar.events.list({\n          'calendarId': id,\n          'timeMin': timeMin.toISOString(),\n          'timeMax': timeMax.toISOString(),\n          'showDeleted': false,\n          'singleEvents': true,\n          'maxResults': 30,\n          'orderBy': 'startTime'\n        })\n      }).then(function (response) {\n        const events = response.result.items;\n        let eventDict = new Object();\n        let totalHours = 0;\n        let listItems;\n\n        if (events.length > 0) {\n          for (let i = 0; i < events.length; i++) {\n            var event = events[i];\n            var start = event.start.dateTime;\n            if (!start) {\n              continue;\n            }\n            var end = event.end.dateTime;\n            var deltaHours = (Date.parse(end) - Date.parse(start)) / 1000 / 60 / 60\n\n            var key = event.summary;\n\n            if (eventDict.hasOwnProperty(key)) {\n              eventDict[key] += deltaHours;\n            } else {\n              eventDict[key] = deltaHours;\n            }\n\n            totalHours += deltaHours;\n          }\n\n          listItems = Object.entries(eventDict).map(([key, value]) =>\n            <li key={key}>\n              <span>{key} &mdash; </span>\n              <span className=\"bold\">{value}</span>\n            </li>\n          );\n        }\n\n        // Update the state\n        that.setState(state => ({\n          totalHours: totalHours,\n          listItems: listItems\n        }));\n      });\n    } else {\n      // We're not logged in, so clear out the data\n      this.setState(state => ({\n        totalHours: -1,\n        listItems: null\n      }));\n    }\n  }\n\n  handleDateChange(newDate) {\n    this.setState(state => ({\n      date: newDate,\n      totalHours: -1\n    }));\n  }\n\n  render() {\n    let breakdown;\n    console.log(this.props.isLoggedIn)\n    if (this.props.isLoggedIn === null || (this.props.isLoggedIn && this.state.totalHours < 0)) {\n      breakdown = <span className=\"good-job\">loading...</span>;\n    } else if (!this.props.isLoggedIn) {\n      breakdown = <span className=\"good-job\">log in to see your hours!</span>\n    } else if (this.state.totalHours == 0) {\n      breakdown = (\n        <div>\n          <span className=\"good-job\">0 hours today. no worries!</span>\n          <DatePicker date={this.state.date} onDateChange={this.handleDateChange} />\n        </div>\n      );\n    } else {\n      breakdown = (\n        <div>\n          <span className=\"good-job\"> way to go! today's total: <span className=\"total-hours\">{this.state.totalHours} hours</span></span>\n          <span> Here's the breakdown &mdash;</span>\n          <ul>\n            {this.state.listItems}\n          </ul >\n          <DatePicker date={this.state.date} onDateChange={this.handleDateChange} />\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {breakdown}\n      </div >\n    );\n  }\n}\n\nclass DatePicker extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { dateString: this.generateDateString(new Date()) }\n    this.subtractDay = this.subtractDay.bind(this);\n    this.addDay = this.addDay.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n  }\n\n  componentWillMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown)\n  }\n\n  componentDidMount() {\n    this.setState(state => ({\n      dateString: this.generateDateString(this.props.date)\n    }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.date != this.props.date) {\n      this.setState(state => ({\n        dateString: this.generateDateString(this.props.date)\n      }));\n    }\n  }\n\n  onKeyDown(e) {\n    e.stopPropagation();\n    console.log(e.which);\n    if (e.which === 39) {\n      this.addDay();\n    } else if (e.which === 37) {\n      this.subtractDay()\n    }\n  }\n\n  generateDateString(date) {\n    const dateTimeFormat = new Intl.DateTimeFormat('en-us', { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' });\n    return dateTimeFormat.format(date);\n  }\n\n  addDays(days) {\n    const newDate = new Date(this.props.date.getTime() + 86400000 * days);\n    this.props.onDateChange(newDate);\n  }\n\n  subtractDay() {\n    this.addDays(-1);\n  }\n\n  addDay() {\n    this.addDays(1);\n  }\n\n  render() {\n    return (\n      <div>\n        <FontAwesomeIcon icon={faChevronLeft} onClick={this.subtractDay} className=\"date-btn\" />\n        <span className=\"date\">{this.state.dateString}</span>\n        <FontAwesomeIcon icon={faChevronRight} onClick={this.addDay} className=\"date-btn\" />\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleAuthChange = this.handleAuthChange.bind(this);\n    this.state = { isLoggedIn: null };\n  }\n\n  handleAuthChange(isLoggedIn) {\n    console.log(isLoggedIn);\n    this.setState({ isLoggedIn: isLoggedIn })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <span className=\"title\">Michaela's Work Hours</span>\n          <LoginControl isLoggedIn={this.state.isLoggedIn} onAuthChange={this.handleAuthChange} />\n          <HoursListing isLoggedIn={this.state.isLoggedIn} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}